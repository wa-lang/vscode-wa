{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Wa/中文",
  "scopeName": "source.wa",
  "fileTypes": ["wz"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#support"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.storage.wa",
          "match": "\\b(跳出|押后|引入|结构|有辙|否则|或则|接口|找辙|常量|循环|字典|类型|继续|函数|迭代|没辙|全局|如果|返回|完毕)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "Types",
          "name": "storage.type.wa",
          "match": "\\b(布尔|字串|错误|字典)\\b"
        },
        {
          "comment": "Singed Ints",
          "name": "storage.name.type.wa",
          "match": "\\b(整型|微整型|短整型|普整型|长整型|符文)\\b"
        },
        {
          "comment": "Unsigned Ints",
          "name": "storage.name.type.wa",
          "match": "\\b(正整|微正整|短正整|普正整|长正整|针型|字节)\\b"
        },
        {
          "comment": "Floats",
          "name": "storage.name.type.wa",
          "match": "\\b(单精|双精)\\b"
        },
        {
          "comment": "Complex",
          "name": "storage.name.type.wa",
          "match": "\\b(单复|双复)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.wa",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        },
        {
          "name": "string.multiline.wa",
          "begin": "\\\\\\\\",
          "end": "$"
        },
        {
          "name": "string.quoted.single.wa",
          "match": "'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.wa",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.wa",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.wa",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.wa",
          "match": "\\b[0-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.wa",
          "match": "\\b0x[a-fA-F0-9_]+\\b"
        },
        {
          "name": "constant.numeric.octal.wa",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.binary.wa",
          "match": "\\b0b[01_]+\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.function.declaration.wa",
          "patterns": [
            {
              "match": "\\b(func)\\s+([A-Z][a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.wa"
                },
                "2": {
                  "name": "entity.name.type.wa"
                }
              }
            },
            {
              "match": "\\b(函数)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "storage.type.function.wa"
                },
                "2": {
                  "name": "entity.name.function.wa"
                }
              }
            },
            {
              "begin": "\\b(函数)\\s+",
              "end": "\"",
              "name": "entity.name.function.wa",
              "beginCaptures": {
                "1": {
                  "name": "storage.type.function.wa"
                }
              },
              "patterns": [
                {
                  "include": "#stringcontent"
                }
              ]
            },
            {
              "name": "keyword.default.wa",
              "match": "\\b(常数|函数)\\b"
            }
          ]
        },
        {
          "name": "meta.function.call.wa",
          "patterns": [
            {
              "match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.type.wa"
            },
            {
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.function.wa"
            }
          ]
        },
        {
          "name": "meta.variable.wa",
          "patterns": [
            {
              "match": "\\b[_A-Z][_A-Z0-9]+\\b",
              "name": "variable.constant.wa"
            },
            {
              "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b",
              "name": "entity.name.type.wa"
            },
            {
              "match": "\\b[A-Z][a-zA-Z0-9]*\\b",
              "name": "entity.name.type.wa"
            },
            {
              "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
              "name": "variable.wa"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.wa",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.wa",
          "match": "((\\+|-|\\*|/|\\%)=?)|(\\+\\+|--)"
        },
        {
          "name": "keyword.operator.logical.wa",
          "match": "(\\!|\\&\\&|\\|\\|)"
        },
        {
          "name": "keyword.operator.assignment.wa",
          "match": "(\\:\\=|\\=)"
        },
        {
          "name": "keyword.operator.bitwise.wa",
          "match": "((<<|>>|&|&\\^|\\^|\\|)=?)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.hash.wa",
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.wa"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.line.zh1.wa",
          "begin": "注:",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.wa"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.line.zh2.wa",
          "begin": "注：",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.wa"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.line.double-slash.wa",
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.wa"
            }
          },
          "end": "$"
        },
        {
          "name": "comment.block.documentation.wa",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.wa"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.wa"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "commentContents": {
      "patterns": [
        {
          "match": "\\b(TODO|FIXME|NOTE|INFO|IDEA|CHANGED|BUG|HACK)\\b:?",
          "name": "keyword.todo.wa"
        }
      ]
    },
    "support": {
      "patterns": []
    }
  }
}
